/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puzzlegame;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Do Duc Duong
 */
public class NewJFrame extends javax.swing.JFrame {

    boolean isStart = false;
    Thread timeCount = new Thread(new TimeCount());
    JButton[][] button;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        int size = getSizeInt();
        Design(size);
//        ActionButton(size);

//        this.Designasd();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        moveCount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        timer = new javax.swing.JLabel();
        level = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        Start = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel1.setText("Move count:");

        moveCount.setText("0");

        jLabel3.setText("Elapsed:");

        timer.setText("0 Sec");

        level.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3x3", "4x4", "5x5", "6x6", "7x7", "8x8", "9x9", "10x10", "11x11", "12x12" }));
        level.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                levelActionPerformed(evt);
            }
        });

        jLabel4.setText("Size:");

        Start.setText("New Game");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timer))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(moveCount))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Start)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(moveCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(timer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Start)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 128, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void levelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_levelActionPerformed
        if (isStart) {
            if (JOptionPane.showConfirmDialog(null, "Do you want to finish this game?", "Arial", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {
                isStart = true;
                int size = getSizeInt();
                Design(size);
                isStart = false;
                return;
            }
        }
        isStart = false;
        int size = getSizeInt();
        Design(size);

//        ActionButton(size);
    }//GEN-LAST:event_levelActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        if (isStart) {
            if (JOptionPane.showConfirmDialog(null, "Do you want to finish this game?", "Arial", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {
                isStart = true;
                int size = getSizeInt();
                Design(size);
//                isStart = false;
                return;
            }
        }
        ActionButton(getSizeInt());
        isStart = true;
        Thread time = new Thread(new TimeCount());
        time.start();

    }//GEN-LAST:event_StartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Start;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> level;
    private javax.swing.JLabel moveCount;
    private javax.swing.JPanel panel;
    private javax.swing.JLabel timer;
    // End of variables declaration//GEN-END:variables

    private class TimeCount implements Runnable {

        @Override
        public void run() {
            for (int i = 1;; i++) {
                timer.setText(i + " sec");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (isWinner(getSizeInt())) {
                    timer.setText("0 sec");
                    moveCount.setText("0");
                    JOptionPane.showMessageDialog(null, "You Are Victory!!!");
                    break;
                } else if (!isStart) {
                    timer.setText("0 sec");
                    moveCount.setText("0");
                    break;
                }
            }
        }
    }

    public int getSizeInt() {
        int levelInt = 0;
        switch (level.getSelectedIndex()) {
            case 0:
                levelInt = 3;
                break;
            case 1:
                levelInt = 4;
                break;
            case 2:
                levelInt = 5;
                break;
            case 3:
                levelInt = 6;
                break;
            case 4:
                levelInt = 7;
                break;
            case 5:
                levelInt = 8;
                break;
            case 6:
                levelInt = 9;
                break;
            case 7:
                levelInt = 10;
                break;
            case 8:
                levelInt = 11;
                break;
            case 9:
                levelInt = 12;
                break;
        }
        return levelInt;
    }

    public void Design(int size) {
        button = new JButton[size][size];
        panel.removeAll();
        panel.setLayout(new GridLayout(size, size));
        this.setSize(300 + 50 * (size - 3), 200 + 50 * (size - 3));
        int[] array = getArray(size * size);

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {

                int num = array[i * size + j];
                if (num == 0) {
                    button[i][j] = new JButton("");
                } else {
                    button[i][j] = new JButton(String.valueOf(array[i * size + j]));
                }

                button[i][j].setPreferredSize(new Dimension(50, 50));
                panel.add(button[i][j]);
            }
        }
    }

    public int[] getArray(int size) {
        Random random = new Random();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            int num = 0;
            boolean isEqual = true;
            while (isEqual) {
                isEqual = false;
                num = random.nextInt(size);
                for (int j = 0; j < i; j++) {
                    if (array[j] == num) {
                        isEqual = true;
                        break;
                    }
                }
            }
            array[i] = num;
        }
        return array;
    }

    public void ActionButton(int size) {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                int m = i;
                int n = j;
                    button[i][j].addActionListener(new ActionListener() {
                        @Override
                        
                        public void actionPerformed(ActionEvent e) {
                            if(!isStart) {
                                return;
                            }
                            if (n + 1 != size) {
                                if (isButtonEmpty(m, n + 1)) {
                                    button[m][n + 1].setText(button[m][n].getText());
                                    button[m][n].setText("");
                                    moveCount.setText(String.valueOf(Integer.parseInt(moveCount.getText()) + 1));
                                }
                            }
                            if (n > 0) {
                                if (isButtonEmpty(m, n - 1)) {
                                    button[m][n - 1].setText(button[m][n].getText());
                                    button[m][n].setText("");
                                    moveCount.setText(String.valueOf(Integer.parseInt(moveCount.getText()) + 1));
                                }
                            }
                            if (m + 1 != size) {
                                if (isButtonEmpty(m + 1, n)) {
                                    button[m + 1][n].setText(button[m][n].getText());
                                    button[m][n].setText("");
                                    moveCount.setText(String.valueOf(Integer.parseInt(moveCount.getText()) + 1));
                                }
                            }
                            if (m > 0) {
                                if (isButtonEmpty(m - 1, n)) {
                                    button[m - 1][n].setText(button[m][n].getText());
                                    button[m][n].setText("");
                                    moveCount.setText(String.valueOf(Integer.parseInt(moveCount.getText()) + 1));
                                }
                            }

                        }
                    });
                }
        }

    }

    public boolean isButtonEmpty(int m, int n) {
        if (button[m][n].getText().equalsIgnoreCase("")) {
            return true;
        } else {
            return false;
        }
    }

    public void ActionButton(int i, int j, int m, int n) {
        button[m][n].addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JButton temp = new JButton(button[i][j].getText());
                button[i][j].setText(button[m][n].getText());
                button[m][n].setText(temp.getText());
            }
        });
    }

    public boolean isWinner(int size) {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (i == size - 1 && j == size - 1) {
                    isStart = false;
                    return true;
                }
                if (!button[i][j].getText().equalsIgnoreCase(String.valueOf(i * size + j + 1))) {
                    return false;
                }

            }
        }
        return true;
    }

}
